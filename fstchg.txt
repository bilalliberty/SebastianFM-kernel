From 442f55b6e9328c8a63139f30bb4f68625a55fed5 Mon Sep 17 00:00:00 2001
From: flar2 <asegaert@gmail.com>
Date: Thu, 11 Apr 2013 22:30:03 -0400
Subject: [PATCH] fastcharge

---
 arch/arm/mach-msm/Kconfig            |   7 +
 arch/arm/mach-msm/Makefile           |   1 +
 arch/arm/mach-msm/fastchg.c          | 257 +++++++++++++++++++++++++++++++++++
 arch/arm/mach-msm/htc_battery_8960.c |  20 +++
 drivers/misc/cable_detect_8xxx.c     |   2 +-
 drivers/usb/otg/msm_otg.c            |  39 ++++++
 include/linux/fastchg.h              |  54 ++++++++
 7 files changed, 379 insertions(+), 1 deletion(-)
 create mode 100644 arch/arm/mach-msm/fastchg.c
 create mode 100644 include/linux/fastchg.h

diff --git a/arch/arm/mach-msm/Kconfig b/arch/arm/mach-msm/Kconfig
index 781640b..b0e9319 100644
--- a/arch/arm/mach-msm/Kconfig
+++ b/arch/arm/mach-msm/Kconfig
@@ -2594,5 +2594,12 @@ config SENSE_4_PLUS
 	help
 	  Support for SENSE 4 PLUS.
 
+config FORCE_FAST_CHARGE
+	bool "Force AC charge mode at will"
+	default y
+	help
+		A simple sysfs interface to force adapters that
+		are detected as USB to charge as AC.
+
 endif
 
diff --git a/arch/arm/mach-msm/Makefile b/arch/arm/mach-msm/Makefile
index dbea9f4..c9c17cd 100644
--- a/arch/arm/mach-msm/Makefile
+++ b/arch/arm/mach-msm/Makefile
@@ -304,6 +304,7 @@ obj-$(CONFIG_MACH_APQ8064_LIQUID) += board-8064-all.o board-8064-regulator.o
 obj-$(CONFIG_MACH_MPQ8064_HRD) += board-8064-all.o board-8064-regulator.o
 obj-$(CONFIG_MACH_MPQ8064_DTV) += board-8064-all.o board-8064-regulator.o
 obj-$(CONFIG_MACH_MONARUDO) += board-monarudo-all.o board-monarudo-regulator.o
+obj-$(CONFIG_FORCE_FAST_CHARGE) += fastchg.o
 
 obj-$(CONFIG_MACH_MONARUDO) += htc_util.o
 obj-$(CONFIG_MACH_ELITE) += board-elite.o board-elite-regulator.o board-elite-gpiomux.o board-elite-storage.o board-elite-audio.o board-elite-camera.o
diff --git a/arch/arm/mach-msm/fastchg.c b/arch/arm/mach-msm/fastchg.c
new file mode 100644
index 0000000..489562a
--- /dev/null
+++ b/arch/arm/mach-msm/fastchg.c
@@ -0,0 +1,257 @@
+/*
+ * Author: Chad Froebel <chadfroebel@gmail.com>
+ *
+ * Ported to Sensation and extended : Jean-Pierre Rasquin <yank555.lu@gmail.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+/*
+ * Possible values for "force_fast_charge" are :
+ *
+ *   0 - disabled (default)
+ *   1 - substitute AC to USB unconditional
+ *   2 - substitute AC to USB only if no USB peripheral is detected
+ *
+ * Possible values for "USB_peripheral_detected" are :
+ *
+ *   0 - No USB accessory currently attached (default)
+ *   1 - USB accessory currently attached
+ *
+ * Possible values for "USB_porttype_detected" are :
+ *
+ *   0 - invalid USB port
+ *   1 - standard downstream port
+ *   2 - dedicated charging port
+ *   3 - charging downstream port
+ *   4 - accessory charger adapter A
+ *   5 - accessory charger adapter B
+ *   6 - accessory charger adapter C
+ *   7 - accessory charger adapter dock
+ *  10 - nothing attached (default)
+ *
+ * Possible values for "is_fast_charge_forced" are :
+ *
+ *   0 - fast charging is currently not forced
+ *   1 - fast charging is currently forced
+ *
+ * Possible values for "current_charge_mode" are :
+ *
+ *   0 - Discharging
+ *   1 - AC
+ *   2 - USB
+ */
+
+#include <linux/kobject.h>
+#include <linux/sysfs.h>
+#include <linux/fastchg.h>
+
+int force_fast_charge;
+int USB_peripheral_detected;
+int USB_porttype_detected;
+int is_fast_charge_forced;
+int current_charge_mode;
+
+/* sysfs interface for "force_fast_charge" */
+static ssize_t force_fast_charge_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf)
+{
+return sprintf(buf, "%d\n", force_fast_charge);
+}
+
+static ssize_t force_fast_charge_store(struct kobject *kobj, struct kobj_attribute *attr, const char *buf, size_t count)
+{
+
+int new_force_fast_charge;
+
+sscanf(buf, "%du", &new_force_fast_charge);
+
+if (new_force_fast_charge >= FAST_CHARGE_DISABLED && new_force_fast_charge <= FAST_CHARGE_FORCE_AC_IF_NO_USB) {
+
+	/* update only if valid value provided */
+	force_fast_charge = new_force_fast_charge;
+
+}
+
+return count;
+}
+
+static struct kobj_attribute force_fast_charge_attribute =
+__ATTR(force_fast_charge, 0666, force_fast_charge_show, force_fast_charge_store);
+
+static struct attribute *force_fast_charge_attrs[] = {
+&force_fast_charge_attribute.attr,
+NULL,
+};
+
+static struct attribute_group force_fast_charge_attr_group = {
+.attrs = force_fast_charge_attrs,
+};
+
+/* sysfs interface for "USB_peripheral_detected" */
+static ssize_t USB_peripheral_detected_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf)
+{
+	switch (USB_peripheral_detected) {
+		case USB_ACC_NOT_DETECTED:	return sprintf(buf, "No\n");
+		case USB_ACC_DETECTED:		return sprintf(buf, "Yes\n");
+		default:			return sprintf(buf, "something went wrong\n");
+	}
+}
+
+static ssize_t USB_peripheral_detected_store(struct kobject *kobj, struct kobj_attribute *attr, const char *buf, size_t count)
+{
+/* no user change allowed */
+return count;
+}
+
+static struct kobj_attribute USB_peripheral_detected_attribute =
+__ATTR(USB_peripheral_detected, 0444, USB_peripheral_detected_show, USB_peripheral_detected_store);
+
+static struct attribute *USB_peripheral_detected_attrs[] = {
+&USB_peripheral_detected_attribute.attr,
+NULL,
+};
+
+static struct attribute_group USB_peripheral_detected_attr_group = {
+.attrs = USB_peripheral_detected_attrs,
+};
+
+/* sysfs interface for "USB_porttype_detected" */
+static ssize_t USB_porttype_detected_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf)
+{
+	switch (USB_porttype_detected) {
+		case USB_INVALID_DETECTED:	return sprintf(buf, "Invalid Port\n");
+		case USB_SDP_DETECTED:		return sprintf(buf, "Standard Downstream Port\n");
+		case USB_DCP_DETECTED:		return sprintf(buf, "Dedicated Charging Port\n");
+		case USB_CDP_DETECTED:		return sprintf(buf, "Charging Downstream Port\n");
+		case USB_ACA_A_DETECTED:	return sprintf(buf, "Accessory Charger Adapter A\n");
+		case USB_ACA_B_DETECTED:	return sprintf(buf, "Accessory Charger Adapter B\n");
+		case USB_ACA_C_DETECTED:	return sprintf(buf, "Accessory Charger Adapter C\n");
+		case USB_ACA_DOCK_DETECTED:	return sprintf(buf, "Accessory Charger Adapter Dock\n");
+		case NO_USB_DETECTED:		return sprintf(buf, "No Port\n");
+		default:			return sprintf(buf, "something went wrong\n");
+	}
+}
+
+static ssize_t USB_porttype_detected_store(struct kobject *kobj, struct kobj_attribute *attr, const char *buf, size_t count)
+{
+/* no user change allowed */
+return count;
+}
+
+static struct kobj_attribute USB_porttype_detected_attribute =
+__ATTR(USB_porttype_detected, 0444, USB_porttype_detected_show, USB_porttype_detected_store);
+
+static struct attribute *USB_porttype_detected_attrs[] = {
+&USB_porttype_detected_attribute.attr,
+NULL,
+};
+
+static struct attribute_group USB_porttype_detected_attr_group = {
+.attrs = USB_porttype_detected_attrs,
+};
+
+/* sysfs interface for "is_fast_charge_forced" */
+static ssize_t is_fast_charge_forced_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf)
+{
+	switch (is_fast_charge_forced) {
+		case FAST_CHARGE_NOT_FORCED:	return sprintf(buf, "No\n");
+		case FAST_CHARGE_FORCED:	return sprintf(buf, "Yes\n");
+		default:			return sprintf(buf, "something went wrong\n");
+	}
+}
+
+static ssize_t is_fast_charge_forced_store(struct kobject *kobj, struct kobj_attribute *attr, const char *buf, size_t count)
+{
+/* no user change allowed */
+return count;
+}
+
+static struct kobj_attribute is_fast_charge_forced_attribute =
+__ATTR(is_fast_charge_forced, 0444, is_fast_charge_forced_show, is_fast_charge_forced_store);
+
+static struct attribute *is_fast_charge_forced_attrs[] = {
+&is_fast_charge_forced_attribute.attr,
+NULL,
+};
+
+static struct attribute_group is_fast_charge_forced_attr_group = {
+.attrs = is_fast_charge_forced_attrs,
+};
+
+/* sysfs interface for "current_charge_mode" */
+static ssize_t current_charge_mode_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf)
+{
+	switch (current_charge_mode) {
+		case CURRENT_CHARGE_MODE_DISCHARGING:	return sprintf(buf, "Discharging\n");
+		case CURRENT_CHARGE_MODE_AC:		return sprintf(buf, "AC\n");
+		case CURRENT_CHARGE_MODE_USB:		return sprintf(buf, "USB\n");
+		default:				return sprintf(buf, "something went wrong\n");
+	}
+}
+
+static ssize_t current_charge_mode_store(struct kobject *kobj, struct kobj_attribute *attr, const char *buf, size_t count)
+{
+/* no user change allowed */
+return count;
+}
+
+static struct kobj_attribute current_charge_mode_attribute =
+__ATTR(current_charge_mode, 0444, current_charge_mode_show, current_charge_mode_store);
+
+static struct attribute *current_charge_mode_attrs[] = {
+&current_charge_mode_attribute.attr,
+NULL,
+};
+
+static struct attribute_group current_charge_mode_attr_group = {
+.attrs = current_charge_mode_attrs,
+};
+
+/* Initialize fast charge sysfs folder */
+static struct kobject *force_fast_charge_kobj;
+
+int force_fast_charge_init(void)
+{
+	int force_fast_charge_retval;
+	int USB_peripheral_detected_retval;
+	int USB_porttype_detected_retval;
+	int is_fast_charge_forced_retval;
+	int current_charge_mode_retval;
+
+	force_fast_charge = FAST_CHARGE_DISABLED; /* Forced fast charge disabled by default */
+	USB_peripheral_detected = USB_ACC_NOT_DETECTED; /* Consider no USB accessory detected so far */
+	USB_porttype_detected = NO_USB_DETECTED; /* Consider no USB port is yet detected */
+	is_fast_charge_forced = FAST_CHARGE_NOT_FORCED; /* Consider fast charge is not forced at start */
+	current_charge_mode = CURRENT_CHARGE_MODE_DISCHARGING; /* Consider we are discharging at start */
+
+        force_fast_charge_kobj = kobject_create_and_add("fast_charge", kernel_kobj);
+        if (!force_fast_charge_kobj) {
+                return -ENOMEM;
+        }
+        force_fast_charge_retval = sysfs_create_group(force_fast_charge_kobj, &force_fast_charge_attr_group);
+        USB_peripheral_detected_retval = sysfs_create_group(force_fast_charge_kobj, &USB_peripheral_detected_attr_group);
+        USB_porttype_detected_retval = sysfs_create_group(force_fast_charge_kobj, &USB_porttype_detected_attr_group);
+        is_fast_charge_forced_retval = sysfs_create_group(force_fast_charge_kobj, &is_fast_charge_forced_attr_group);
+        current_charge_mode_retval = sysfs_create_group(force_fast_charge_kobj, &current_charge_mode_attr_group);
+        if (force_fast_charge_retval && USB_peripheral_detected_retval && USB_porttype_detected_retval && is_fast_charge_forced_retval && current_charge_mode_retval)
+                kobject_put(force_fast_charge_kobj);
+        return (force_fast_charge_retval && USB_peripheral_detected_retval && USB_porttype_detected_retval && is_fast_charge_forced_retval && current_charge_mode_retval);
+}
+/* end sysfs interface */
+
+void force_fast_charge_exit(void)
+{
+	kobject_put(force_fast_charge_kobj);
+}
+
+module_init(force_fast_charge_init);
+module_exit(force_fast_charge_exit);
+
diff --git a/arch/arm/mach-msm/htc_battery_8960.c b/arch/arm/mach-msm/htc_battery_8960.c
index 32891ed..501759d 100644
--- a/arch/arm/mach-msm/htc_battery_8960.c
+++ b/arch/arm/mach-msm/htc_battery_8960.c
@@ -40,6 +40,9 @@
 #include <mach/htc_charger.h>
 #include <mach/htc_battery_cell.h>
 
+#ifdef CONFIG_FORCE_FAST_CHARGE
+#include <linux/fastchg.h>
+#endif
 
 #define HTC_BATT_CHG_DIS_BIT_EOC	(1)
 #define HTC_BATT_CHG_DIS_BIT_ID		(1<<1)
@@ -535,9 +538,26 @@ static void cable_status_notifier_func(enum usb_connect_type online)
 
 	switch (online) {
 	case CONNECT_TYPE_USB:
+#ifdef CONFIG_FORCE_FAST_CHARGE
+		/* If forced fast charge is enabled "always" or if no USB device detected, go AC */
+		if ((force_fast_charge == FAST_CHARGE_FORCE_AC) ||
+		    (force_fast_charge == FAST_CHARGE_FORCE_AC_IF_NO_USB &&
+       	             USB_peripheral_detected == USB_ACC_NOT_DETECTED        )) {
+			BATT_LOG("cable USB forced to AC");
+			is_fast_charge_forced = FAST_CHARGE_FORCED;
+			current_charge_mode = CURRENT_CHARGE_MODE_AC;
+			htc_charger_event_notify(HTC_CHARGER_EVENT_SRC_AC);
+		} else {
+			BATT_LOG("cable USB not forced to AC");
+			is_fast_charge_forced = FAST_CHARGE_NOT_FORCED;
+			current_charge_mode = CURRENT_CHARGE_MODE_USB;
+			htc_charger_event_notify(HTC_CHARGER_EVENT_SRC_USB);
+		}
+#else
 		BATT_LOG("USB charger");
 		htc_charger_event_notify(HTC_CHARGER_EVENT_SRC_USB);
 		
+#endif
 		break;
 	case CONNECT_TYPE_AC:
 		BATT_LOG("5V AC charger");
diff --git a/drivers/misc/cable_detect_8xxx.c b/drivers/misc/cable_detect_8xxx.c
index 763f364..4ad625c 100644
--- a/drivers/misc/cable_detect_8xxx.c
+++ b/drivers/misc/cable_detect_8xxx.c
@@ -109,7 +109,7 @@ static void send_cable_connect_notify(int cable_type)
 	CABLE_DEBUG("%s: cable_type = %d\n", __func__, cable_type);
 
 	if (cable_type == CONNECT_TYPE_UNKNOWN)
-		cable_type = CONNECT_TYPE_USB;
+		cable_type = CONNECT_TYPE_AC;
 
 	if (pInfo->ac_9v_gpio && (cable_type == CONNECT_TYPE_USB
 				|| cable_type == CONNECT_TYPE_AC
diff --git a/drivers/usb/otg/msm_otg.c b/drivers/usb/otg/msm_otg.c
index 2bb4d9a..cc945be 100644
--- a/drivers/usb/otg/msm_otg.c
+++ b/drivers/usb/otg/msm_otg.c
@@ -50,6 +50,10 @@
 #include <mach/board.h>
 #include <mach/board_htc.h>
 
+#ifdef CONFIG_FORCE_FAST_CHARGE
+#include <linux/fastchg.h>
+#endif
+
 #define MSM_USB_BASE	(motg->regs)
 #define DRIVER_NAME	"msm_otg"
 
@@ -73,6 +77,15 @@ static void send_usb_connect_notify(struct work_struct *w)
 
 	motg->connect_type_ready = 1;
 	USBH_INFO("send connect type %d\n", motg->connect_type);
+#ifdef CONFIG_FORCE_FAST_CHARGE
+	if (motg->connect_type == CONNECT_TYPE_USB) {
+		USB_peripheral_detected = USB_ACC_DETECTED; /* Inform forced fast charge that a USB accessory has been attached */
+		USBH_INFO("USB forced fast charge : USB device currently attached");
+	} else {
+		USB_peripheral_detected = USB_ACC_NOT_DETECTED; /* Inform forced fast charge that a USB accessory has not been attached */
+		USBH_INFO("USB forced fast charge : No USB device currently attached");
+	}
+#endif
 	mutex_lock(&notify_sem);
 	list_for_each_entry(notifier, &g_lh_usb_notifier_list, notifier_link) {
 		if (notifier->func != NULL) {
@@ -652,6 +665,12 @@ static int msm_otg_reset(struct usb_phy *phy)
 	u32 ulpi_val = 0;
 	USBH_INFO("%s\n", __func__);
 
+#ifdef CONFIG_FORCE_FAST_CHARGE
+	USB_porttype_detected = NO_USB_DETECTED; /* No USB plugged, clear fast charge detected port value */
+	is_fast_charge_forced = FAST_CHARGE_NOT_FORCED; /* No fast charge can be forced then... */
+	current_charge_mode = CURRENT_CHARGE_MODE_DISCHARGING; /* ... and we are now on battery */
+#endif
+
 	if (pdata->disable_reset_on_disconnect) {
 		if (motg->reset_counter)
 			return 0;
@@ -2035,6 +2054,26 @@ static void msm_chg_detect_work(struct work_struct *w)
 		msm_chg_enable_aca_intr(motg);
 		USBH_INFO("chg_type = %s\n",
 			chg_to_string(motg->chg_type));
+#ifdef CONFIG_FORCE_FAST_CHARGE
+		switch (motg->chg_type) {
+		case USB_SDP_CHARGER:		USB_porttype_detected = USB_SDP_DETECTED;
+						break;
+		case USB_DCP_CHARGER:		USB_porttype_detected = USB_DCP_DETECTED;
+						break;
+		case USB_CDP_CHARGER:		USB_porttype_detected = USB_CDP_DETECTED;
+						break;
+		case USB_ACA_A_CHARGER:		USB_porttype_detected = USB_ACA_A_DETECTED;
+						break;
+		case USB_ACA_B_CHARGER:		USB_porttype_detected = USB_ACA_B_DETECTED;
+						break;
+		case USB_ACA_C_CHARGER:		USB_porttype_detected = USB_ACA_C_DETECTED;
+						break;
+		case USB_ACA_DOCK_CHARGER:	USB_porttype_detected = USB_ACA_DOCK_DETECTED;
+						break;
+		default:			USB_porttype_detected = USB_INVALID_DETECTED;
+						break;
+		}
+#endif
 		queue_work(system_nrt_wq, &motg->sm_work);
 		queue_work(motg->usb_wq, &motg->notifier_work);
 		return;
diff --git a/include/linux/fastchg.h b/include/linux/fastchg.h
new file mode 100644
index 0000000..ba8e68c
--- /dev/null
+++ b/include/linux/fastchg.h
@@ -0,0 +1,54 @@
+/*
+ * Author: Chad Froebel <chadfroebel@gmail.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+
+#ifndef _LINUX_FASTCHG_H
+#define _LINUX_FASTCHG_H
+
+extern int force_fast_charge;
+
+#define FAST_CHARGE_DISABLED 0	/* default */
+#define FAST_CHARGE_FORCE_AC 1
+#define FAST_CHARGE_FORCE_AC_IF_NO_USB 2
+
+extern int USB_peripheral_detected;
+
+#define USB_ACC_NOT_DETECTED 0	/* default */
+#define USB_ACC_DETECTED 1
+
+#define USB_INVALID_DETECTED 0
+#define USB_SDP_DETECTED 1
+#define USB_DCP_DETECTED 2
+#define USB_CDP_DETECTED 3
+#define USB_ACA_A_DETECTED 4
+#define USB_ACA_B_DETECTED 5
+#define USB_ACA_C_DETECTED 6
+#define USB_ACA_DOCK_DETECTED 7
+#define NO_USB_DETECTED 10	/* default */
+
+extern int USB_porttype_detected;
+
+extern int is_fast_charge_forced;
+
+#define FAST_CHARGE_NOT_FORCED 0
+#define FAST_CHARGE_FORCED 1
+
+extern int current_charge_mode;
+
+#define CURRENT_CHARGE_MODE_DISCHARGING 0
+#define CURRENT_CHARGE_MODE_AC 1
+#define CURRENT_CHARGE_MODE_USB 2
+
+#endif
+
-- 
2.0.3

